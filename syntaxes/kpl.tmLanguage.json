{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Kernel Programming Language",
  "scopeName": "source.kpl",
  "fileTypes": [".k", ".h"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#strings" },
    { "include": "#constants" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.kpl",
          "match": "--.*$"
        },
        {
          "name": "comment.block.kpl",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": []
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.kpl",
          "match": "\\b(if|else|elseIf|while|for|do|until|break|continue|return|switch|case|default|try|catch|throw)\\b"
        },
        {
          "name": "keyword.control.end.kpl",
          "match": "\\b(endIf|endWhile|endFor|endSwitch|endTry)\\b"
        },
        {
          "name": "keyword.memory.kpl",
          "match": "\\b(alloc|new|free|sizeOf)\\b"
        },
        {
          "name": "keyword.typecheck.kpl",
          "match": "\\b(asInteger|arraySize|isInstanceOf|isKindOf)\\b"
        },
        {
          "name": "storage.type.kpl",
          "match": "\\b(code|class|interface|behavior|superclass|function|method|enum|record|var|const)\\b"
        },
        {
          "name": "storage.type.section.kpl",
          "match": "\\b(messages|methods|header|functions|fields|errors|type)\\b"
        },
        {
          "name": "storage.type.end.kpl",
          "match": "\\b(endCode|endClass|endHeader|endInterface|endBehavior|endFunction|endMethod|endRecord)\\b"
        },
        {
          "name": "storage.modifier.kpl",
          "match": "\\b(external|extends|implements|infix|prefix|uses|renaming)\\b"
        },
        {
          "name": "support.connector.kpl",
          "match": "\\b(of|to|by|asPtrTo|returns)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.builtin.kpl",
          "match": "\\b(array|int|char|bool|double|void|typeOfNull|anyType)\\b"
        },
        {
          "name": "storage.type.pointer.kpl",
          "match": "\\bptr\\b"
        },
        {
          "name": "entity.name.type.kpl",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.kpl",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.comparison.kpl",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.kpl",
          "match": "\\|\\||&&|!"
        },
        {
          "name": "keyword.operator.bitwise.kpl",
          "match": "\\||\\^|&|<<|>>|>>>"
        },
        {
          "name": "keyword.operator.assignment.kpl",
          "match": "="
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.kpl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.kpl",
          "match": "\\\\."
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.kpl",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "constant.numeric.integer.kpl",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.kpl",
          "match": "\\b\\d+\\.\\d*\\b"
        },
        {
          "name": "constant.numeric.hex.kpl",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.kpl",
          "match": "\\b(function|method)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "storage.type.function.kpl" },
            "2": { "name": "entity.name.function.kpl" }
          }
        },
        {
          "name": "meta.function.call.kpl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.kpl" }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.kpl",
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b(?!\\s*\\()"
        },
        {
          "name": "variable.language.kpl",
          "match": "\\b(self|super)\\b"
        }
      ]
    }
  }
}
